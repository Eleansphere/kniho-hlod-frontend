name: Kniho-Hlod

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  # CI Pipeline - Build and Test
  ci:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    # - name: Run TypeScript type check
    #   run: npm run type-check
    
    # - name: Run linting
    #   run: npm run lint
    
    # - name: Run unit tests
    #   run: npm run test:unit
    
    - name: Run build
      run: npm run build-only
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.node-version }}
        path: dist/
        retention-days: 7

  # Security and Code Quality
  security:
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for outdated dependencies
      run: npm outdated || exit 0

  # CD Pipeline - Deploy to Staging (GitHub Pages preview)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for staging
      run: npm run build
      env:
        NODE_ENV: staging
        VITE_API_URL: ${{ secrets.STAGING_API_URL }}
        VITE_BASE_URL: /staging/
    
    - name: Deploy to staging branch
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        destination_dir: staging
        publish_branch: gh-pages

  # CD Pipeline - Deploy to Production (GitHub Pages)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        VITE_BASE_URL: /${{ github.event.repository.name }}/
    
    - name: Run E2E tests
      run: npm run test:e2e
      if: hashFiles('cypress/**/*') != ''
    
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Changes in this Release:
          ${{ github.event.head_commit.message }}
          
          ðŸš€ Deployed to: ${{ steps.deployment.outputs.page_url }}
        draft: false
        prerelease: false

  # Performance monitoring
  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
        configPath: '.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true